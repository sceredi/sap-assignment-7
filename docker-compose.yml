services:

  dashboard:
    container_name: dashboard
    extends:
      file:  EScootersManagementSystemDashboard/docker-compose.dashboard.yml
      service: dashboard-service
    ports:
      - "3000:3000"
    networks:
      - gateway-network
    restart: always


  api-gateway:
    container_name: api-gateway
    extends:
      file: APIGateway/docker-compose.apigateway.yml
      service: api-gateway
    restart: always
    networks:
      - gateway-network
      - escooters-network
      - users-network
      - rides-network


  escooters-service:
    container_name: escooters-service
    extends:
      file: EScootersService/docker-compose.escooters.yml
      service: escooters-service
    depends_on:
      escooters-db:
        condition: service_healthy
    restart: always
    networks:
      - escooters-network
      - escooters-db-network

  escooters-db:
    container_name: escooters-db
    extends:
      file: EScootersService/docker-compose.escooters.yml
      service: escooters-db
    networks:
      - escooters-db-network
    restart: always


  users-service:
    container_name: users-service
    extends:
      file: UsersService/docker-compose.users.yaml
      service: users-service
    depends_on:
      users-db:
        condition: service_healthy
    restart: always
    networks:
      - users-network
      - users-db-network

  users-db:
    container_name: users-db
    extends:
      file: UsersService/docker-compose.users.yaml
      service: users-db
    restart: always
    networks:
      - users-db-network


  rides-service:
    container_name: rides-service
    extends:
      file: RidesService/docker-compose.rides.yml
      service: rides-service
    depends_on:
      rides-db:
        condition: service_healthy
    restart: always
    networks:
      - rides-db-network
      - rides-network

  rides-db:
    container_name: rides-db
    extends:
      file: RidesService/docker-compose.rides.yml
      service: rides-db
    restart: always
    networks:
      - rides-db-network

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - grafana-prom
      - gateway-network
      - escooters-network
      - users-network
      - rides-network

  grafana:
    image: grafana/grafana:10.4.4
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin # Set a password for the Grafana admin user
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - grafana-prom

networks:
  gateway-network:
  escooters-network:
  escooters-db-network:
  users-network:
  users-db-network:
  rides-network: 
  rides-db-network: 
  grafana-prom:

volumes:
  grafana-storage:
